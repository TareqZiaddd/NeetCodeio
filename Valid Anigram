char[] a = {'a', 'b', 'c'};
char[] b = {'c', 'b', 'a'};

String ss = new String(a);
String tt = new String(b);

System.out.println(ss); // "abc"
System.out.println(tt); // "abc"




242. Valid Anagram
Easy

10591

331

Add to List

Share
Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.
 

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Converte String to Arrays of characters
//sorted this Arrays
//convert Arrays to Strings
//add Strings to HashSet
//if (hashSet.size ==1) return true




class Solution {
    public boolean isAnagram(String s, String t) 
    {

        char[] a=s.toCharArray();
        char[] b=t.toCharArray();
        Arrays.sort(a);
        Arrays.sort(b);

        String ss=new String(a);
        String tt=new String(b);
       

        Set<String>set=new HashSet<>();
        set.add(ss);
        set.add(tt);

       
        if (set.size()==1)
        {
            return true;
        }



        return false;
        
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
The toCharArray() method takes O(n) time.
The sort() method takes O(n log n) time.
The new String() method takes O(n) time.
